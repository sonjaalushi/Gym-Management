package com.gymapp;

import project.ConnectionProvider;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

public class NewMember implements ActionListener {

    JFrame frame = new JFrame();
    JLabel newMember = new JLabel("NEW MEMBER");
    JLabel memberID = new JLabel("Member ID");
    JLabel idNumber = new JLabel("00");
    JLabel memberName = new JLabel("Name");
    JTextField memberNameField = new JTextField();
    JLabel mobileNumber = new JLabel("Mobile Number");
    JTextField mobileNumberField = new JTextField();
    JLabel email = new JLabel("Email");
    JTextField emailField = new JTextField();
    JLabel gender = new JLabel("Gender");
    JComboBox genderBox = new JComboBox();
    JLabel gymTime = new JLabel("Gym Time");
    JComboBox timeBox = new JComboBox();
    JLabel cardId = new JLabel("Card ID");
    JTextField cardField = new JTextField();
    JLabel age = new JLabel("Age");
    JTextField ageField = new JTextField();
    JLabel amount = new JLabel("Amount to Pay");
    JTextField amountField = new JTextField();
    JButton saveButton = new JButton("Save");
    JButton clearButton = new JButton("Clear");
    JButton backButon = new JButton("Back");

    NewMember() {
        newMember.setBounds(523, 85, 350, 71);
        newMember.setFont(new Font("Poppins", Font.BOLD, 50));
        newMember.setForeground(new Color(217, 118, 67));

        memberID.setBounds(116, 204, 117, 100);
        memberID.setFont(new Font("Poppins", Font.BOLD, 20));
        memberID.setForeground(new Color(212, 157, 66));

        idNumber.setBounds(252, 204, 117, 100);
        idNumber.setFont(new Font("Poppins", Font.BOLD, 20));
        idNumber.setForeground(new Color(212, 157, 66));

        memberName.setBounds(116, 282, 62, 28);
        memberName.setFont(new Font("Poppins", Font.BOLD, 20));
        memberName.setForeground(new Color(212, 157, 66));

        memberNameField.setBounds(116, 322, 500, 25);
        memberNameField.setFont(new Font("Poppins", Font.PLAIN, 16));

        mobileNumber.setBounds(116, 385, 175, 28);
        mobileNumber.setFont(new Font("Poppins", Font.BOLD, 20));
        mobileNumber.setForeground(new Color(212, 157, 66));

        mobileNumberField.setBounds(116, 425, 500, 25);
        mobileNumberField.setFont(new Font("Poppins", Font.PLAIN, 16));

        email.setBounds(116, 500, 60, 28);
        email.setFont(new Font("Poppins", Font.BOLD, 20));
        email.setForeground(new Color(212, 157, 66));

        emailField.setBounds(116, 540, 500, 25);
        emailField.setFont(new Font("Poppins", Font.PLAIN, 16));

        gender.setBounds(116, 615, 76, 28);
        gender.setFont(new Font("Poppins", Font.BOLD, 20));
        gender.setForeground(new Color(212, 157, 66));

        genderBox.setBounds(116, 655, 500, 25);
        genderBox.setFont(new Font("Poppins", Font.PLAIN, 16));
        genderBox.setModel(new DefaultComboBoxModel<>(new String[]{"Male", "Female", "Others"}));
        genderBox.addActionListener(this);

        gymTime.setBounds(751, 282, 105, 28);
        gymTime.setFont(new Font("Poppins", Font.BOLD, 20));
        gymTime.setForeground(new Color(212, 157, 66));

        timeBox.setBounds(751, 322, 500, 25);
        timeBox.setFont(new Font("Poppins", Font.PLAIN, 16));
        timeBox.setModel(new DefaultComboBoxModel<>(new String[]{"05:00 - 09:00", "09:00 - 13:00", "13:00 - 17:00", "17:00 - 21:00"}));
        timeBox.addActionListener(this);

        cardId.setBounds(751, 385, 80, 28);
        cardId.setFont(new Font("Poppins", Font.BOLD, 20));
        cardId.setForeground(new Color(212, 157, 66));

        cardField.setBounds(751, 425, 500, 25);
        cardField.setFont(new Font("Poppins", Font.PLAIN, 16));

        age.setBounds(751, 500, 41, 28);
        age.setFont(new Font("Poppins", Font.BOLD, 20));
        age.setForeground(new Color(212, 157, 66));

        ageField.setBounds(751, 540, 500, 25);
        ageField.setFont(new Font("Poppins", Font.PLAIN, 16));

        amount.setBounds(751, 615, 160, 28);
        amount.setFont(new Font("Poppins", Font.BOLD, 20));
        amount.setForeground(new Color(212, 157, 66));

        amountField.setBounds(751, 655, 500, 25);
        amountField.setFont(new Font("Poppins", Font.PLAIN, 16));

        backButon.setBounds(116, 107, 70, 28);
        backButon.setFocusable(false);
        backButon.addActionListener(this);
        backButon.setFocusable(false);
        backButon.setForeground(new Color(83, 53, 74));
        backButon.setBackground(new Color(212, 157, 66));
        backButon.setOpaque(true);

        saveButton.setBounds(472, 731, 100, 50);
        saveButton.setFocusable(false);
        saveButton.addActionListener(this);
        saveButton.setFont(new Font("Poppins", Font.BOLD, 18));
        saveButton.setFocusable(false);
        saveButton.setForeground(new Color(83, 53, 74));
        saveButton.setBackground(new Color(212, 157, 66));
        saveButton.setOpaque(true);

        clearButton.setBounds(837, 731, 100, 50);
        clearButton.setFocusable(false);
        clearButton.addActionListener(this);
        clearButton.setFont(new Font("Poppins", Font.BOLD, 18));
        clearButton.setFocusable(false);
        clearButton.setForeground(new Color(83, 53, 74));
        clearButton.setBackground(new Color(212, 157, 66));
        clearButton.setOpaque(true);

        frame.setTitle("New Member");
        frame.add(newMember);
        frame.add(memberID);
        frame.add(idNumber);
        frame.add(memberName);
        frame.add(memberNameField);
        frame.add(mobileNumber);
        frame.add(mobileNumberField);
        frame.add(email);
        frame.add(emailField);
        frame.add(gender);
        frame.add(genderBox);
        frame.add(gymTime);
        frame.add(timeBox);
        frame.add(cardId);
        frame.add(cardField);
        frame.add(age);
        frame.add(ageField);
        frame.add(amount);
        frame.add(amountField);
        frame.add(saveButton);
        frame.add(clearButton);
        frame.add(backButon);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1440, 900);
        frame.setLayout(null);
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
        frame.getContentPane().setBackground(new Color(105, 60, 114));

    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == backButon) {
            frame.dispose();
            new MainMenu();
        }

        if (e.getSource() == clearButton) {
            memberNameField.setText("");
            mobileNumberField.setText("");
            emailField.setText("");
            cardField.setText("");
            ageField.setText("");
            amountField.setText("");
        }

        try {
            int id = 1;
            String str1 = String.valueOf(id);
            idNumber.setText(str1);
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select max(id) from member");
            while (rs.next()) {
                id = rs.getInt(1);
                id = id + 1;
                String str = String.valueOf(id);
                idNumber.setText(str);
            }
        } catch (Exception e1) {
            JOptionPane.showMessageDialog(null, e1);
        }

        if (e.getSource() == saveButton) {
            String id = idNumber.getText();
            String name = memberNameField.getText();
            String mobile = mobileNumberField.getText();
            String email = emailField.getText();
            String gender = (String) genderBox.getSelectedItem();
            String time = (String) timeBox.getSelectedItem();
            String personalnumber = cardField.getText();
            String age = ageField.getText();
            String amount = amountField.getText();
            try {
                Connection con = ConnectionProvider.getCon();
                PreparedStatement ps = con.prepareStatement("insert into member values (?,?,?,?,?,?,?,?,?)");
                UpdateDeleteMember.Dublicate(age, id, name, mobile, email, gender, time, personalnumber, ps);
                ps.setString(9, amount);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Successfully Saved");
                frame.dispose();
                new NewMember();
            } catch (Exception e1) {
                JOptionPane.showMessageDialog(null, e1);
            }
        }
    }
}
